#!/usr/bin/env bash

set -e
set -o pipefail

dirname="$(cd $(dirname "$(realpath "${BASH_SOURCE[0]}")") && pwd)"
cd ${dirname}

if [ -z "$PYTHON_BIN_PATH" ]; then
  PYTHON_BIN_PATH=$(which python3 || which python || true)
fi

# Set TensorFlow Serving version
export TF_SERVING_VERSION="r2.15"
export TAG="GlideKV-v1"

# rm -rf ${dirname}/tensorflow_serving ${dirname}/third_party
git checkout WORKSPACE .bazelrc
# Clone TensorFlow Serving if not exists
if [ ! -d "serving" ]; then
    sudo apt-get update && sudo apt-get install -y libtool
    echo "ðŸ“¥ Cloning TensorFlow Serving repository..."
    git clone https://github.com/tensorflow/serving.git
    cd ${dirname}/serving
    git checkout ${TF_SERVING_VERSION}

    cp -r ${dirname}/serving/tensorflow_serving ${dirname}
    cp -r ${dirname}/serving/third_party ${dirname}
    # cp -r ${dirname}/build_deps ${dirname}

else
    cd serving && git checkout WORKSPACE .bazelrc tensorflow_serving/servables/tensorflow/saved_model_warmup_util.cc && cd ..
    echo "âœ“ TensorFlow Serving repository already exists"
fi

target_string="TF_RETURN_IF_ERROR(status);"
sed -i "/$target_string/a \\
  setenv(\"WARMUP_PATH\", warmup_path.c_str(), 1); \\
  " ${dirname}/serving/tensorflow_serving/servables/tensorflow/saved_model_warmup_util.cc

tail -n +2 ${dirname}/serving/WORKSPACE >> ${dirname}/WORKSPACE
cat ${dirname}/serving/.bazelrc >> ${dirname}/.bazelrc

sed -i 's/D_GLIBCXX_USE_CXX11_ABI=0/D_GLIBCXX_USE_CXX11_ABI=1/g' ${dirname}/.bazelrc
sed -i '/gen_status_stamp/d' ${dirname}/.bazelrc

# Set all env variables
cd ${dirname}
"$PYTHON_BIN_PATH" "${dirname}/configure.py" "$@"

echo "Configuration finished"
